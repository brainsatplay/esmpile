import * as pathUtils from "data:application/javascript;base64,aW1wb3J0ICogYXMgbWltZVR5cGVzIGZyb20gImRhdGE6YXBwbGljYXRpb24vamF2YXNjcmlwdDtiYXNlNjQsTHk4Z1RXbHRaU0JVZVhCbElGSmxjMjlzZFhScGIyNEtaWGh3YjNKMElHTnZibk4wSUdweklEMGdKMkZ3Y0d4cFkyRjBhVzl1TDJwaGRtRnpZM0pwY0hRbkNtVjRjRzl5ZENCamIyNXpkQ0JwYzBwVElEMGdLSFI1Y0dVcElEMCtJQ0YwZVhCbElIeDhJSFI1Y0dVZ1BUMDlJQ2RoY0hCc2FXTmhkR2x2Ymk5cVlYWmhjMk55YVhCMEp3cGxlSEJ2Y25RZ1kyOXVjM1FnYldGd0lEMGdld29nSUNBZ0oycHpKem9nYW5Nc0NpQWdJQ0FuYldwekp6b2dhbk1zQ2lBZ0lDQW5ZMnB6SnpvZ2FuTXNDaUFnSUNBaWRITWlPaUFpZEdWNGRDOTBlWEJsYzJOeWFYQjBJaXdLSUNBZ0lDZHFjMjl1SnpvZ0ltRndjR3hwWTJGMGFXOXVMMnB6YjI0aUxBb2dJQ0FnSjJoMGJXd25PaUFuZEdWNGRDOW9kRzFzSnl3S0lDQWdJQ2RqYzNNbk9pQW5kR1Y0ZEM5amMzTW5MQW9nSUNBZ0ozUjRkQ2M2SUNkMFpYaDBMM0JzWVdsdUp5d0tJQ0FnSUNkemRtY25PaUFuYVcxaFoyVXZjM1puSzNodGJDY3NDaUFnSUNBbmNHNW5Kem9nSjJsdFlXZGxMM0J1Wnljc0NpQWdJQ0FuYW5Cbkp6b2dKMmx0WVdkbEwycHdaV2NuTEFvZ0lDQWdKMnB3Wldjbk9pQW5hVzFoWjJVdmFuQmxaeWNzQ2lBZ0lDQW5aMmxtSnpvZ0oybHRZV2RsTDJkcFppY3NDaUFnSUNBbmQyVmljQ2M2SUNkcGJXRm5aUzkzWldKd0p5d0tDaUFnSUNBbmJYQXpKem9nSjJGMVpHbHZMMjF3WldjbkxBb2dJQ0FnSjIxd05DYzZJQ2QyYVdSbGJ5OXRjRFFuTEFvZ0lDQWdKM2RsWW0wbk9pQW5kbWxrWlc4dmQyVmliU2NzQ2lBZ0lDQW5iMmRuSnpvZ0oyRndjR3hwWTJGMGFXOXVMMjluWnljc0NpQWdJQ0FuZDJGMkp6b2dKMkYxWkdsdkwzZGhkaWNLZlFvS1pYaHdiM0owSUdOdmJuTjBJR2RsZENBOUlDaGxlSFJsYm5OcGIyNHBJRDArSUcxaGNGdGxlSFJsYm5OcGIyNWRDZz09IjsgLy8gSW1wb3J0ZWQgZnJvbSBmaWxlOi8vL1VzZXJzL2dhcnJldHRmbHlubi9Eb2N1bWVudHMvR2l0aHViL3JlbW90ZS1lc20vc3JjL3V0aWxzL21pbWVUeXBlcy5qcwoKCmltcG9ydCBkZWZhdWx0cyBmcm9tICJkYXRhOmFwcGxpY2F0aW9uL2phdmFzY3JpcHQ7YmFzZTY0LFpYaHdiM0owSUdSbFptRjFiSFFnZXdvZ0lDQWdibTlrWlUxdlpIVnNaWE02SUhzS0lDQWdJQ0FnSUNCdWIyUmxUVzlrZFd4bGN6b2dJbTV2WkdWZmJXOWtkV3hsY3lJc0NpQWdJQ0FnSUNBZ2NtVnNZWFJwZG1WVWJ6b2dJaTR2SWdvZ0lDQWdmUXA5IjsgLy8gSW1wb3J0ZWQgZnJvbSBmaWxlOi8vL1VzZXJzL2dhcnJldHRmbHlubi9Eb2N1bWVudHMvR2l0aHViL3JlbW90ZS1lc20vc3JjL3V0aWxzL2RlZmF1bHRzLmpzCgoKCmNvbnN0IHVybFNlcCA9ICc6Ly8nCgpleHBvcnQgY29uc3QgZ2V0ID0gKHBhdGgsIHJlbCA9ICcnLCBrZWVwUmVsYXRpdmVJbXBvcnRzPWZhbHNlLCBpc0RpcmVjdG9yeSA9IGZhbHNlKSA9PiB7CgogICAgaWYgKHVybChwYXRoKSkgcmV0dXJuIHBhdGgKICAgIC8vIGlmICghcGF0aC5pbmNsdWRlcygnLi8nKSkgcmVsID0gJycgLy8gYWJzb2x1dGUKCiAgICBsZXQgcHJlZml4ID0gJycKICAgIGNvbnN0IGdldFByZWZpeCA9IChzdHIpID0+IHsKICAgICAgICBwcmVmaXggPSAoc3RyLmluY2x1ZGVzKHVybFNlcCkpID8gc3RyLnNwbGl0KHVybFNlcCkuc3BsaWNlKDAsMSkgOiB1bmRlZmluZWQKICAgICAgICBpZiAocHJlZml4KSByZXR1cm4gc3RyLnJlcGxhY2UoYCR7cHJlZml4fSR7dXJsU2VwfWAsICcnKQogICAgICAgIGVsc2UgcmV0dXJuIHN0cgogICAgfQoKICAgIGlmIChwYXRoLmluY2x1ZGVzKHVybFNlcCkpIHBhdGggPSBnZXRQcmVmaXgocGF0aCkKICAgIGlmIChyZWwuaW5jbHVkZXModXJsU2VwKSkgcmVsID0gZ2V0UHJlZml4KHJlbCkKCiAgICBpZiAoIWtlZXBSZWxhdGl2ZUltcG9ydHMpIHJlbCA9IHJlbC5zcGxpdCgnLycpLmZpbHRlcih2ID0+IHYgIT0gJy4uJykuam9pbignLycpIC8vIFJlbW92ZSBsZWFkaW5nIC4uCgogICAgaWYgKHJlbFtyZWwubGVuZ3RoIC0gMV0gPT09ICcvJykgcmVsID0gcmVsLnNsaWNlKDAsIC0xKSAvLyBSZW1vdmUgdHJhaWxpbmcgc2xhc2hlcwoKICAgIGxldCBkaXJUb2tlbnMgPSByZWwuc3BsaXQoJy8nKQogICAgaWYgKGRpclRva2Vucy5sZW5ndGggPT09IDEgJiYgZGlyVG9rZW5zWzBdID09PSAnJykgZGlyVG9rZW5zID0gW10gLy8gUmVtb3ZlIGNvbnNlcXVlbmNlIG9mIGVtcHR5IHN0cmluZyByZWwKCiAgICBpZiAoIWlzRGlyZWN0b3J5KXsKICAgICAgICBjb25zdCBwb3RlbnRpYWxGaWxlID0gZGlyVG9rZW5zLnBvcCgpIC8vIHJlbW92ZSBmaWxlIG5hbWUKICAgICAgICBpZiAocG90ZW50aWFsRmlsZSkgewogICAgICAgICAgICBjb25zdCBzcGxpdFBhdGggPSBwb3RlbnRpYWxGaWxlLnNwbGl0KCcuJykKICAgICAgICBpZiAoc3BsaXRQYXRoLmxlbmd0aCA9PSAxIHx8IChzcGxpdFBhdGgubGVuZ3RoID4gMSAmJiBzcGxpdFBhdGguaW5jbHVkZXMoJycpKSkgZGlyVG9rZW5zLnB1c2gocG90ZW50aWFsRmlsZSkgLy8gQVNTVU1QVElPTjogQWxsIGZpbGVzIGhhdmUgYW4gZXh0ZW5zaW9uCiAgICAgICAgfQogICAgfQoKICAgIGNvbnN0IHNwbGl0UGF0aCA9IHBhdGguc3BsaXQoIi8iKQogICAgY29uc3QgcGF0aFRva2VucyA9IHNwbGl0UGF0aC5maWx0ZXIoKHN0ciwgaSkgPT4gISFzdHIpIC8vIHJlbW92ZSBib29rZW5kIHNsYXNoZXMKCiAgICBjb25zdCBleHRlbnNpb25Ub2tlbnMgPSBwYXRoVG9rZW5zLmZpbHRlcigoc3RyLCBpKSA9PiB7CiAgICAgICAgaWYgKHN0ciA9PT0gJy4uJykgewogICAgICAgICAgICBkaXJUb2tlbnMucG9wKCkgLy8gUG9wIG9mZiBkaXJlY3RvcmllcwogICAgICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgICB9IGVsc2UgaWYgKHN0ciA9PT0gJy4nKSByZXR1cm4gZmFsc2UKICAgICAgICBlbHNlIHJldHVybiB0cnVlCiAgICB9KQoKICAgIC8vIENvbmNhdGVuYXRlIHdpdGggd2luZG93TG9jYXRpb24gaWYgcmVsIG1hdGNoZWQgT1Igbm8gcmVsIGFuZCBwYXRoIG1hdGNoZWQuLi4KICAgIGNvbnN0IG5ld1BhdGggPSBbLi4uZGlyVG9rZW5zLCAuLi5leHRlbnNpb25Ub2tlbnNdLmpvaW4oJy8nKQoKCiAgICAvLyBBZGQgcHJlZml4IGJhY2sgaWYgaXQgZXhpc3RzCiAgICBpZiAocHJlZml4KSByZXR1cm4gcHJlZml4ICsgJzovLycgKyBuZXdQYXRoCiAgICBlbHNlIHJldHVybiBuZXdQYXRoCn0KCgpleHBvcnQgZnVuY3Rpb24gYWJzb2x1dGUodXJpLCB1cmxXb3JrcykgewogICAgY29uc3QgYWJzb2x1dGVQYXRoID0gdXJpWzBdICE9PSAiLiI7CiAgICBjb25zdCBpc1JlbW90ZSA9IHVybCh1cmkpOwogICAgcmV0dXJuIGFic29sdXRlUGF0aCAmJiAodXJsV29ya3MgfHwgIWlzUmVtb3RlKQp9CgpleHBvcnQgZnVuY3Rpb24gdXJsKHVyaSkgewogICAgdHJ5IHsKICAgICAgICBuZXcgVVJMKHVyaSkKICAgICAgICByZXR1cm4gdHJ1ZQogICAgfSBjYXRjaCB7CiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICB9Cn0KCmV4cG9ydCBjb25zdCBleHRlbnNpb24gPSAocGF0aCkgPT4gewogICAgY29uc3QgZXh0ID0gcGF0aC5zcGxpdCgnLycpLnNsaWNlKC0xKVswXS5zcGxpdCgiLiIpLnNsaWNlKC0xKVswXTsKICAgIGlmIChtaW1lVHlwZXMubWFwW2V4dF0pIHJldHVybiBleHQKfQoKCi8vIFJlbW92ZSBGaWxlIE5hbWUKZXhwb3J0IGNvbnN0IGJhc2UgPSAoc3RyKSA9PiBzdHIuc3Vic3RyaW5nKDAsIHN0ci5sYXN0SW5kZXhPZigiLyIpKTsKCgpleHBvcnQgY29uc3Qgbm9CYXNlID0gKHBhdGgsIG9wdHMsIHJlbW92ZU5vZGUpID0+IHsKCiAgICBwYXRoID0gKGdsb2JhbFRoaXMubG9jYXRpb24pID8gcGF0aC5yZXBsYWNlKGAke2Jhc2UoZ2xvYmFsVGhpcy5sb2NhdGlvbi5ocmVmKX0vYCwgIi4vIikgOiBwYXRoCgogICAgY29uc3QgYWJzb2x1dGVQYXRoID0gYWJzb2x1dGUocGF0aCwgdHJ1ZSkKICAgIGNvbnN0IHJlbGF0aXZlVG8gPSBvcHRzLnJlbGF0aXZlVG8gPz8gZGVmYXVsdHMubm9kZU1vZHVsZXMucmVsYXRpdmVUbwogICAgY29uc3Qgbm9kZU1vZHVsZVBhdGggPSBvcHRzLm5vZGVNb2R1bGVzID8/IGRlZmF1bHRzLm5vZGVNb2R1bGVzLm5vZGVNb2R1bGVzCiAgICAKICAgIC8vIFBhc3MgQWJzb2x1dGUKICAgIGlmIChhYnNvbHV0ZVBhdGgpIHJldHVybiBwYXRoCgogICAgLy8gS2VlcCBSZWxhdGl2ZQogICAgZWxzZSB7CiAgICAgICAgbGV0IG5vQmFzZSA9IHBhdGgKICAgICAgICBpZiAocmVtb3ZlTm9kZSkgbm9CYXNlID0gbm9CYXNlLnJlcGxhY2UoYCR7bm9kZU1vZHVsZVBhdGh9L2AsICIiKQogICAgICAgIG5vQmFzZSA9IG5vQmFzZS5yZXBsYWNlKGAke3JlbGF0aXZlVG8uc3BsaXQoIi8iKS5zbGljZSgwLCAtMSkuam9pbigiLyIpfS9gLCAiIik7CiAgICAgICAgaWYgKG5vQmFzZVswXSAhPT0gJy4nKSBub0Jhc2UgPSBgLi8ke25vQmFzZX1gCiAgICAgICAgcmV0dXJuIG5vQmFzZQogICAgfQp9CgpleHBvcnQgY29uc3QgcGF0aElkID0gKHBhdGgsIG9wdHMpID0+IGdldChub0Jhc2UocGF0aCxvcHRzKSkKCg=="; // Imported from file:///Users/garrettflynn/Documents/Github/remote-esm/src/utils/path.js


import * as nodeModules from "data:application/javascript;base64,"; // Imported from file:///Users/garrettflynn/Documents/Github/remote-esm/src/utils/nodeModules.js


import * as sourceMap from "data:application/javascript;base64,"; // Imported from file:///Users/garrettflynn/Documents/Github/remote-esm/src/utils/sourceMap.js


import * as load from "data:application/javascript;base64,ZXhwb3J0IGNvbnN0IHNjcmlwdCA9IGFzeW5jICh1cmkpID0+IHsKICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgoKHJlc29sdmUsIHJlamVjdCkgPT4gewoKICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKQoKICAgICAgICBsZXQgciA9IGZhbHNlCiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICghciAmJiAoIXRoaXMucmVhZHlTdGF0ZSB8fCB0aGlzLnJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJykpIHsKICAgICAgICAgICAgICAgIHIgPSB0cnVlCiAgICAgICAgICAgICAgICByZXNvbHZlKHdpbmRvdykKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgc2NyaXB0Lm9uZXJyb3IgPSByZWplY3QKCiAgICAgICAgc2NyaXB0LnNyYyA9IHVyaTsKICAgICAgICBkb2N1bWVudC5ib2R5Lmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlZW5kJywgc2NyaXB0KQogICAgfSkpCn0K"; // Imported from file:///Users/garrettflynn/Documents/Github/remote-esm/src/utils/load.js


import * as bundle from "data:application/javascript;base64,"; // Imported from file:///Users/garrettflynn/Documents/Github/remote-esm/src/Bundle.js



export const resolve = pathUtils.get
export const path = pathUtils

// ------------- OOP Usage -------------
export const Bundle = bundle.default

// ------------- Functional Usage -------------
export const compile = async (uri, opts = {}) => {
    opts = Object.assign({}, opts) // copy options
    const thisBundle = bundle.get(uri, opts) // grab or create bundle
    await thisBundle.resolve()
    return thisBundle.result;
};

export default compile

export {
    sourceMap,
    nodeModules,
    load,
    bundle
}